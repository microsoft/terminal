// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

namespace Microsoft.Terminal.Core
{
    enum MatchMode
    {
        None,
        All
    };

    enum CursorStyle
    {
        Vintage,
        Bar,
        Underscore,
        DoubleUnderscore,
        FilledBox,
        EmptyBox
    };

    enum AdjustTextMode
    {
        Never,
        Indexed,
        Always,
        Automatic
    };

    // TerminalCore declares its own Color struct to avoid depending
    // on Windows.UI.Color and to avoid passing around unclothed uint32s.
    // It is supported by til::color for conversions in and out of WinRT land.
    struct Color
    {
        UInt8 R;
        UInt8 G;
        UInt8 B;
        UInt8 A;
    };

    // Yes, this is also just an IReference<Color>. However, IReference has some
    // weird ownership semantics that just make it a pain for something as
    // simple as "maybe this color doesn't have a value set".
    struct OptionalColor
    {
        Boolean HasValue;
        Microsoft.Terminal.Core.Color Color;
    };

    // TerminalCore declares its own Color struct to avoid depending on
    // Windows.UI. Windows.Foundation.Point also exists, but it's composed of
    // floating-point coordinates, when we almost always need integer coordinates.
    // It is supported by til::point for conversions in and out of WinRT land.
    struct Point
    {
        Int32 X;
        Int32 Y;
    };

    // Same thing here, but with padding. Can't use Windows.UI.Thickness, so
    // we'll declare our own.
    struct Padding {
        Single Left;
        Single Top;
        Single Right;
        Single Bottom;
    };

    // This is a projection of Microsoft::Terminal::Core::ControlKeyStates,
    // for conversions in and out of WinRT land.
    struct ControlKeyStates
    {
        UInt32 Value;
    };

    declare
    {
        // Forward declare this parameterized specialization so that it lives
        // in TerminalCore instead of being flung to the winds of all IDL dependents.
        interface Windows.Foundation.IReference<Microsoft.Terminal.Core.Color>;
        interface Windows.Foundation.IReference<Microsoft.Terminal.Core.Point>;
    }

    interface ICoreAppearance
    {
        Microsoft.Terminal.Core.Color DefaultForeground { get; };
        Microsoft.Terminal.Core.Color DefaultBackground { get; };
        Microsoft.Terminal.Core.Color SelectionBackground { get; };
        Microsoft.Terminal.Core.Color GetColorTableEntry(Int32 index);
        Microsoft.Terminal.Core.Color CursorColor { get; };
        CursorStyle CursorShape { get; };
        UInt32 CursorHeight { get; };
        Boolean IntenseIsBold { get; };
        Boolean IntenseIsBright { get; };
        AdjustTextMode AdjustIndistinguishableColors { get; };

        // NOTE! When adding something here, make sure to update ControlProperties.h too!
    };
}
