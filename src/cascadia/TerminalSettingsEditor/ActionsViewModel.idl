// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

import "EnumEntry.idl";
import "ColorSchemeViewModel.idl";
import "MainPage.idl";

namespace Microsoft.Terminal.Settings.Editor
{
    runtimeclass NavigateToCommandArgs
    {
        CommandViewModel Command { get; };
        IHostedInWindow WindowRoot { get; };
    }

    runtimeclass ModifyKeyChordEventArgs
    {
        Microsoft.Terminal.Control.KeyChord OldKeys { get; };
        Microsoft.Terminal.Control.KeyChord NewKeys { get; };
    }

    runtimeclass CommandViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
    {
        // Settings Model side
        String Name;
        String ID { get; };
        Boolean IsUserAction { get; };
        // keybindings
        IObservableVector<KeyChordViewModel> KeyChordViewModelList { get; };
        // action args
        ActionArgsViewModel ActionArgsVM { get; };

        // View-model specific
        String DisplayName { get; };
        String FirstKeyChordText { get; };
        String DisplayNameAndKeyChordAutomationPropName { get; };

        // UI side (command list page)
        void Edit_Click();

        // UI side (edit command page)
        IObservableVector<String> AvailableShortcutActions { get; };
        Object ProposedShortcutActionName;
        void Delete_Click();
        void AddKeybinding_Click();
        event Windows.Foundation.TypedEventHandler<Object, ArgWrapper> PropagateColorSchemeRequested;
        event Windows.Foundation.TypedEventHandler<Object, ArgWrapper> PropagateColorSchemeNamesRequested;
        event Windows.Foundation.TypedEventHandler<Object, ArgWrapper> PropagateWindowRootRequested;
        event Windows.Foundation.TypedEventHandler<Object, Object> FocusContainer;

        // UI side (edit command page, automation property names)
        String ActionNameTextBoxAutomationPropName { get; };
        String ShortcutActionComboBoxAutomationPropName { get; };
        String AdditionalArgumentsControlAutomationPropName { get; };
    }

    runtimeclass ArgWrapper : Windows.UI.Xaml.Data.INotifyPropertyChanged
    {
        String Name { get; };
        String Type { get; };
        Microsoft.Terminal.Settings.Model.ArgTypeHint TypeHint { get; };
        Boolean Required { get; };
        IInspectable Value;
        IInspectable EnumValue;
        Windows.Foundation.Collections.IObservableVector<Microsoft.Terminal.Settings.Editor.EnumEntry> EnumList { get; };
        Windows.Foundation.Collections.IObservableVector<Microsoft.Terminal.Settings.Editor.FlagEntry> FlagList { get; };
        ColorSchemeViewModel DefaultColorScheme;
        Windows.Foundation.Collections.IVector<String> ColorSchemeNamesList;
        IHostedInWindow WindowRoot;

        // unboxing functions
        String UnboxString(Object value);
        UInt32 UnboxInt32(Object value);
        Single UnboxInt32Optional(Object value);
        UInt32 UnboxUInt32(Object value);
        Single UnboxUInt32Optional(Object value);
        Single UnboxFloat(Object value);
        Boolean UnboxBool(Object value);
        Windows.Foundation.IReference<Boolean> UnboxBoolOptional(Object value);
        Windows.Foundation.IReference<Microsoft.Terminal.Core.Color> UnboxTerminalCoreColorOptional(Object value);
        Windows.Foundation.IReference<Microsoft.Terminal.Core.Color> UnboxWindowsUIColorOptional(Object value);

        // bind back functions
        void StringBindBack(String newValue);
        void Int32BindBack(Double newValue);
        void Int32OptionalBindBack(Double newValue);
        void UInt32BindBack(Double newValue);
        void UInt32OptionalBindBack(Double newValue);
        void FloatBindBack(Double newValue);
        void BoolOptionalBindBack(Windows.Foundation.IReference<Boolean> newValue);
        void TerminalCoreColorBindBack(Windows.Foundation.IReference<Microsoft.Terminal.Core.Color> newValue);
        void WindowsUIColorBindBack(Windows.Foundation.IReference<Microsoft.Terminal.Core.Color> newValue);

        void BrowseForFile_Click(IInspectable sender, Windows.UI.Xaml.RoutedEventArgs args);
        void BrowseForFolder_Click(IInspectable sender, Windows.UI.Xaml.RoutedEventArgs args);

        event Windows.Foundation.TypedEventHandler<Object, ArgWrapper> ColorSchemeRequested;
        event Windows.Foundation.TypedEventHandler<Object, ArgWrapper> ColorSchemeNamesRequested;
        event Windows.Foundation.TypedEventHandler<Object, ArgWrapper> WindowRootRequested;
    }

    runtimeclass ActionArgsViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
    {
        Boolean HasArgs { get; };
        IObservableVector<ArgWrapper> ArgValues;
        event Windows.Foundation.TypedEventHandler<Object, Object> WrapperValueChanged;
        event Windows.Foundation.TypedEventHandler<Object, ArgWrapper> PropagateColorSchemeRequested;
        event Windows.Foundation.TypedEventHandler<Object, ArgWrapper> PropagateColorSchemeNamesRequested;
        event Windows.Foundation.TypedEventHandler<Object, ArgWrapper> PropagateWindowRootRequested;
    }

    runtimeclass KeyChordViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
    {
        String KeyChordText { get; };

        // UI side
        Microsoft.Terminal.Control.KeyChord ProposedKeys;
        Windows.UI.Xaml.Controls.Flyout AcceptChangesFlyout;
        Boolean IsInEditMode { get; };
        void ToggleEditMode();
        void AttemptAcceptChanges();
        void CancelChanges();
        void DeleteKeyChord();
        String CancelButtonName { get; };
        String AcceptButtonName { get; };
        String DeleteButtonName { get; };

        event Windows.Foundation.TypedEventHandler<KeyChordViewModel, Microsoft.Terminal.Control.KeyChord> AddKeyChordRequested;
        event Windows.Foundation.TypedEventHandler<KeyChordViewModel, ModifyKeyChordEventArgs> ModifyKeyChordRequested;
        event Windows.Foundation.TypedEventHandler<KeyChordViewModel, Microsoft.Terminal.Control.KeyChord> DeleteKeyChordRequested;
    }

    enum ActionsSubPage
    {
        Base = 0,
        Edit = 1
    };

    runtimeclass ActionsViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
    {
        ActionsViewModel(Microsoft.Terminal.Settings.Model.CascadiaSettings settings);
        void UpdateSettings(Microsoft.Terminal.Settings.Model.CascadiaSettings settings);

        void AddNewCommand();

        ActionsSubPage CurrentPage;
        CommandViewModel CurrentCommand;
        Boolean DisplayBadge { get; };

        void AttemptAddOrModifyKeyChord(KeyChordViewModel senderVM, String commandID, Microsoft.Terminal.Control.KeyChord newKeys, Microsoft.Terminal.Control.KeyChord oldKeys);
        void AttemptDeleteKeyChord(Microsoft.Terminal.Control.KeyChord keys);
        void AttemptAddCopiedCommand(Microsoft.Terminal.Settings.Model.Command newCommand);
        void AttemptRegenerateCommandID(Microsoft.Terminal.Settings.Model.Command command);

        IObservableVector<CommandViewModel> CommandList { get; };
        void CmdListItemClicked(IInspectable sender, Windows.UI.Xaml.Controls.ItemClickEventArgs args);

        Windows.Foundation.Collections.IMap<Microsoft.Terminal.Settings.Model.ShortcutAction, String> AvailableShortcutActionsAndNames();
        Windows.Foundation.Collections.IMap<String, Microsoft.Terminal.Settings.Model.ShortcutAction> NameToActionMap();
    }
}
